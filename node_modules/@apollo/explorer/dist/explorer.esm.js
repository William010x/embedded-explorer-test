import React, { useState, useRef, useEffect } from 'react';
import useDeepCompareEffect from 'use-deep-compare-effect';

// Test urls for QA against staging. These will need to be updated
// for every change
var EMBEDDABLE_EXPLORER_URL_STAGING = 'https://deploy-preview-6300--embeddable-explorer.netlify.app/';

var EMBEDDABLE_EXPLORER_URL = 'https://explorer.embed.apollographql.com';

var EXPLORER_LISTENING_FOR_SCHEMA = 'ExplorerListeningForSchema';
var SCHEMA_RESPONSE = 'SchemaResponse'; // Message types for queries and mutations

var EXPLORER_QUERY_MUTATION_REQUEST = 'ExplorerRequest';
var EXPLORER_QUERY_MUTATION_RESPONSE = 'ExplorerResponse'; // Message types for subscriptions
var IFRAME_DOM_ID = function IFRAME_DOM_ID(uniqueId) {
  return "apollo-embed-" + uniqueId;
}; // Message types for authentication

var EXPLORER_LISTENING_FOR_HANDSHAKE = 'ExplorerListeningForHandshake';
var HANDSHAKE_RESPONSE = 'HandshakeResponse';
var SET_PARTIAL_AUTHENTICATION_TOKEN_FOR_PARENT = 'SetPartialAuthenticationTokenForParent';
var EXPLORER_LISTENING_FOR_PARTIAL_TOKEN = 'ExplorerListeningForPartialToken';
var PARTIAL_AUTHENTICATION_TOKEN_RESPONSE = 'PartialAuthenticationTokenResponse';

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var runtime_1 = createCommonjsModule(function (module) {
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var runtime = (function (exports) {

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined$1; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
    return obj[key];
  }
  try {
    // IE 8 has a broken Object.defineProperty that only works on DOM objects.
    define({}, "");
  } catch (err) {
    define = function(obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  define(IteratorPrototype, iteratorSymbol, function () {
    return this;
  });

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = GeneratorFunctionPrototype;
  define(Gp, "constructor", GeneratorFunctionPrototype);
  define(GeneratorFunctionPrototype, "constructor", GeneratorFunction);
  GeneratorFunction.displayName = define(
    GeneratorFunctionPrototype,
    toStringTagSymbol,
    "GeneratorFunction"
  );

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      define(prototype, method, function(arg) {
        return this._invoke(method, arg);
      });
    });
  }

  exports.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  exports.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      define(genFun, toStringTagSymbol, "GeneratorFunction");
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return PromiseImpl.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return PromiseImpl.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
    return this;
  });
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    if (PromiseImpl === void 0) PromiseImpl = Promise;

    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList),
      PromiseImpl
    );

    return exports.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined$1) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined$1;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined$1;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  define(Gp, toStringTagSymbol, "Generator");

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  define(Gp, iteratorSymbol, function() {
    return this;
  });

  define(Gp, "toString", function() {
    return "[object Generator]";
  });

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined$1;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined$1, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined$1;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined$1;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined$1;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined$1;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined$1;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;

}(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
   module.exports 
));

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, in modern engines
  // we can explicitly access globalThis. In older engines we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  if (typeof globalThis === "object") {
    globalThis.regeneratorRuntime = runtime;
  } else {
    Function("r", "regeneratorRuntime = r")(runtime);
  }
}
});

// to each request's headers if not present

function getHeadersWithContentType(headers) {
  var headersWithContentType = headers != null ? headers : {};

  if (Object.keys(headersWithContentType).every(function (key) {
    return key.toLowerCase() !== 'content-type';
  })) {
    headersWithContentType['content-type'] = 'application/json';
  }

  return headersWithContentType;
}

function sendPostMessageToEmbed(_ref) {
  var _embeddedIFrameElemen;

  var message = _ref.message,
      embeddedIFrameElement = _ref.embeddedIFrameElement,
      embedUrl = _ref.embedUrl;
  embeddedIFrameElement == null ? void 0 : (_embeddedIFrameElemen = embeddedIFrameElement.contentWindow) == null ? void 0 : _embeddedIFrameElemen.postMessage(message, embedUrl);
} // | MessageEvent<{
//     name: typeof EXPLORER_LISTENING_FOR_HANDSHAKE;
//   }>
// | MessageEvent<{
//     name: typeof EXPLORER_QUERY_MUTATION_REQUEST;
//     operationName?: string;
//     operation: string;
//     operationId: string;
//     variables?: Record<string, string>;
//     headers?: Record<string, string>;
//     sandboxEndpointUrl?: string;
//   }>
// | MessageEvent<{
//     name: typeof EXPLORER_LISTENING_FOR_SCHEMA;
//   }>
// | MessageEvent<{
//     name: typeof SET_PARTIAL_AUTHENTICATION_TOKEN_FOR_PARENT;
//     key: string;
//     partialToken: string;
//   }>
// | MessageEvent<{
//     name: typeof EXPLORER_LISTENING_FOR_PARTIAL_TOKEN;
//     localStorageKey?: string;
//   }>
// | MessageEvent<{
//     name: typeof INTROSPECTION_QUERY_WITH_HEADERS;
//     introspectionRequestBody: string;
//     introspectionRequestHeaders: Record<string, string>;
//     sandboxEndpointUrl?: string;
//   }>;

function executeOperation(_ref2) {
  var endpointUrl = _ref2.endpointUrl,
      handleRequest = _ref2.handleRequest,
      operation = _ref2.operation,
      operationName = _ref2.operationName,
      variables = _ref2.variables,
      headers = _ref2.headers,
      embeddedIFrameElement = _ref2.embeddedIFrameElement,
      operationId = _ref2.operationId,
      embedUrl = _ref2.embedUrl;
  return handleRequest(endpointUrl, {
    method: 'POST',
    headers: getHeadersWithContentType(headers),
    body: JSON.stringify({
      query: operation,
      variables: variables,
      operationName: operationName
    })
  }).then( /*#__PURE__*/function () {
    var _ref3 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(response) {
      var json, responseHeaders;
      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return response.json();

            case 2:
              json = _context.sent;
              responseHeaders = {};
              response.headers.forEach(function (value, key) {
                responseHeaders[key] = value;
              });
              sendPostMessageToEmbed({
                message: {
                  // Include the same operation ID in the response message's name
                  // so the Explorer knows which operation it's associated with
                  name: EXPLORER_QUERY_MUTATION_RESPONSE,
                  operationId: operationId,
                  response: _extends({}, json, {
                    status: response.status,
                    headers: responseHeaders
                  })
                },
                embeddedIFrameElement: embeddedIFrameElement,
                embedUrl: embedUrl
              });

            case 6:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function (_x) {
      return _ref3.apply(this, arguments);
    };
  }())["catch"](function (response) {
    sendPostMessageToEmbed({
      message: {
        // Include the same operation ID in the response message's name
        // so the Explorer knows which operation it's associated with
        name: EXPLORER_QUERY_MUTATION_RESPONSE,
        operationId: operationId,
        response: {
          error: _extends({
            message: response.message
          }, response.stack ? {
            stack: response.stack
          } : {})
        }
      },
      embeddedIFrameElement: embeddedIFrameElement,
      embedUrl: embedUrl
    });
  });
}

function setupEmbedRelay(_ref) {
  var endpointUrl = _ref.endpointUrl,
      handleRequest = _ref.handleRequest,
      embeddedExplorerIFrameElement = _ref.embeddedExplorerIFrameElement,
      updateSchemaInEmbed = _ref.updateSchemaInEmbed,
      schema = _ref.schema,
      graphRef = _ref.graphRef,
      autoInviteOptions = _ref.autoInviteOptions,
      apolloStudioEnv = _ref.apolloStudioEnv;
  var embedUrl = getEmbeddedExplorerBaseUrl(apolloStudioEnv); // Callback definition

  var onPostMessageReceived = function onPostMessageReceived(event) {
    var data = event.data; // When embed connects, send a handshake message

    if (data.name === EXPLORER_LISTENING_FOR_HANDSHAKE) {
      sendPostMessageToEmbed({
        message: {
          name: HANDSHAKE_RESPONSE,
          graphRef: graphRef,
          inviteToken: autoInviteOptions == null ? void 0 : autoInviteOptions.inviteToken,
          accountId: autoInviteOptions == null ? void 0 : autoInviteOptions.accountId
        },
        embeddedIFrameElement: embeddedExplorerIFrameElement,
        embedUrl: embedUrl
      });
    } // When the embed authenticates, save the partial token in local storage


    if (data.name === SET_PARTIAL_AUTHENTICATION_TOKEN_FOR_PARENT) {
      var partialEmbedApiKeysString = window.localStorage.getItem('apolloStudioEmbeddedExplorerEncodedApiKey');
      var partialEmbedApiKeys = partialEmbedApiKeysString ? JSON.parse(partialEmbedApiKeysString) : {};
      partialEmbedApiKeys[data.localStorageKey] = data.partialToken;
      window.localStorage.setItem('apolloStudioEmbeddedExplorerEncodedApiKey', JSON.stringify(partialEmbedApiKeys));
    }

    if (data.name === EXPLORER_LISTENING_FOR_PARTIAL_TOKEN && data.localStorageKey) {
      var _partialEmbedApiKeysString = window.localStorage.getItem('apolloStudioEmbeddedExplorerEncodedApiKey');

      var _partialEmbedApiKeys = _partialEmbedApiKeysString ? JSON.parse(_partialEmbedApiKeysString) : {};

      if (_partialEmbedApiKeys && _partialEmbedApiKeys[data.localStorageKey]) {
        sendPostMessageToEmbed({
          message: {
            name: PARTIAL_AUTHENTICATION_TOKEN_RESPONSE,
            partialToken: _partialEmbedApiKeys[data.localStorageKey]
          },
          embeddedIFrameElement: embeddedExplorerIFrameElement,
          embedUrl: embedUrl
        });
      }
    } // Embedded Explorer sends us a PM when it is ready for a schema


    if ('name' in data && data.name === EXPLORER_LISTENING_FOR_SCHEMA && !!schema) {
      updateSchemaInEmbed({
        schema: schema
      });
    } // Check to see if the posted message indicates that the user is
    // executing a query or mutation or subscription in the Explorer


    var isQueryOrMutation = 'name' in data && data.name === EXPLORER_QUERY_MUTATION_REQUEST; // If the user is executing a query or mutation or subscription...

    if (isQueryOrMutation && data.operation && data.operationId) {
      // Extract the operation details from the event.data object
      var operation = data.operation,
          operationId = data.operationId,
          operationName = data.operationName,
          variables = data.variables,
          headers = data.headers;

      if (isQueryOrMutation) {
        executeOperation({
          endpointUrl: endpointUrl,
          handleRequest: handleRequest,
          operation: operation,
          operationName: operationName,
          variables: variables,
          headers: headers,
          embeddedIFrameElement: embeddedExplorerIFrameElement,
          operationId: operationId,
          embedUrl: embedUrl
        });
      }
    }
  }; // Execute our callback whenever window.postMessage is called


  window.addEventListener('message', onPostMessageReceived);
  return {
    dispose: function dispose() {
      return window.removeEventListener('message', onPostMessageReceived);
    }
  };
}

function getEmbeddedExplorerBaseUrl(apolloStudioEnv) {
  return apolloStudioEnv === 'staging' ? EMBEDDABLE_EXPLORER_URL_STAGING : EMBEDDABLE_EXPLORER_URL;
}
var idCounter = 0;
var EmbeddedExplorer = /*#__PURE__*/function () {
  function EmbeddedExplorer(options) {
    var _this = this,
        _this$options$handleR;

    this.getEmbeddedExplorerURL = function () {
      var _displayOptions$docsP, _displayOptions$theme;

      var _ref = _this.options.initialState || {},
          document = _ref.document,
          variables = _ref.variables,
          headers = _ref.headers,
          displayOptions = _ref.displayOptions;

      var persistExplorerState = _this.options.persistExplorerState;
      var graphRef = 'graphRef' in _this.options ? _this.options.graphRef : undefined;
      var queryParams = {
        graphRef: graphRef,
        document: document ? encodeURIComponent(document) : undefined,
        variables: variables ? encodeURIComponent(JSON.stringify(variables)) : undefined,
        headers: headers ? encodeURIComponent(JSON.stringify(headers)) : undefined,
        shouldPersistState: !!persistExplorerState,
        sendRequestsFrom: 'parent',
        docsPanelState: (_displayOptions$docsP = displayOptions == null ? void 0 : displayOptions.docsPanelState) != null ? _displayOptions$docsP : 'open',
        showHeadersAndEnvVars: (displayOptions == null ? void 0 : displayOptions.showHeadersAndEnvVars) !== false,
        theme: (_displayOptions$theme = displayOptions == null ? void 0 : displayOptions.theme) != null ? _displayOptions$theme : 'dark'
      };
      var queryString = Object.entries(queryParams).filter(function (_ref2) {
        var value = _ref2[1];
        return value !== undefined;
      }).map(function (_ref3) {
        var key = _ref3[0],
            value = _ref3[1];
        return key + "=" + value;
      }).join('&');
      return getEmbeddedExplorerBaseUrl(_this.options.apolloStudioEnv) + "?" + queryString;
    };

    this.options = options;
    this.validateOptions();
    this.handleRequest = (_this$options$handleR = this.options.handleRequest) != null ? _this$options$handleR : fetch;
    this.uniqueEmbedInstanceId = idCounter++;
    this.embeddedExplorerURL = this.getEmbeddedExplorerURL();
    this.embeddedExplorerIFrameElement = this.injectEmbed();
    this.disposable = setupEmbedRelay({
      embeddedExplorerIFrameElement: this.embeddedExplorerIFrameElement,
      endpointUrl: this.options.endpointUrl,
      handleRequest: this.handleRequest,
      updateSchemaInEmbed: this.updateSchemaInEmbed.bind(this),
      schema: 'schema' in this.options ? this.options.schema : undefined,
      graphRef: 'graphRef' in this.options ? this.options.graphRef : undefined,
      autoInviteOptions: this.options.autoInviteOptions,
      apolloStudioEnv: this.options.apolloStudioEnv || 'prod'
    });
  }

  var _proto = EmbeddedExplorer.prototype;

  _proto.dispose = function dispose() {
    var _document$getElementB;

    // remove the dom element
    (_document$getElementB = document.getElementById(IFRAME_DOM_ID(this.uniqueEmbedInstanceId))) == null ? void 0 : _document$getElementB.remove(); // remove the listener

    this.disposable.dispose();
  };

  _proto.injectEmbed = function injectEmbed() {
    var _element;

    var element;
    var target = this.options.target;

    if (typeof target === 'string') {
      var _document;

      element = (_document = document) == null ? void 0 : _document.querySelector == null ? void 0 : _document.querySelector(target);
    } else {
      element = target;
    }

    var iframeElement = document.createElement('iframe');
    iframeElement.src = this.embeddedExplorerURL;
    iframeElement.id = IFRAME_DOM_ID(this.uniqueEmbedInstanceId);
    iframeElement.setAttribute('style', 'height: 100%; width: 100%; border: none;');
    (_element = element) == null ? void 0 : _element.appendChild(iframeElement);
    return iframeElement;
  };

  _proto.validateOptions = function validateOptions() {
    if (!this.options.target) {
      throw new Error('"target" is required');
    }

    if (!this.options.handleRequest && !this.options.endpointUrl) {
      throw new Error('`endpointUrl` is required unless you write a custom `handleRequest`');
    }

    if ('schema' in this.options && 'graphRef' in this.options) {
      throw new Error('Both `schema` and `graphRef` cannot be set. You can either send your schema as an IntrospectionQuery or string via the `schema` field, or specifiy a public graphRef.');
    }

    if (!('schema' in this.options || 'graphRef' in this.options)) {
      throw new Error('You must set either `schema` or `graphRef`.');
    }
  };

  _proto.updateSchemaInEmbed = function updateSchemaInEmbed(_ref4) {
    var schema = _ref4.schema;
    sendPostMessageToEmbed({
      message: {
        name: SCHEMA_RESPONSE,
        schema: schema
      },
      embeddedIFrameElement: this.embeddedExplorerIFrameElement,
      embedUrl: getEmbeddedExplorerBaseUrl(this.options.apolloStudioEnv)
    });
  };

  return EmbeddedExplorer;
}();

function ApolloExplorerReact(props) {
  var _useState = useState(),
      wrapperElement = _useState[0],
      setWrapperElement = _useState[1];

  var currentEmbedRef = useRef();
  useDeepCompareEffect(function () {
    var _currentEmbedRef$curr;

    if (!wrapperElement) return;
    (_currentEmbedRef$curr = currentEmbedRef.current) == null ? void 0 : _currentEmbedRef$curr.dispose();
    currentEmbedRef.current = new EmbeddedExplorer(_extends({}, props, {
      target: wrapperElement
    }));
    return function () {
      var _currentEmbedRef$curr2;

      return (_currentEmbedRef$curr2 = currentEmbedRef.current) == null ? void 0 : _currentEmbedRef$curr2.dispose();
    };
  }, // we purposely exclude schema here
  // when the schema changes we don't want to tear down and render a new embed,
  // we just want to pm the new schema to the embed in the above useEffect
  [props.endpointUrl, props.handleRequest, props.initialState, props.persistExplorerState, props.graphRef, wrapperElement]);
  useEffect(function () {
    var _currentEmbedRef$curr3;

    if (props.schema) (_currentEmbedRef$curr3 = currentEmbedRef.current) == null ? void 0 : _currentEmbedRef$curr3.updateSchemaInEmbed({
      schema: props.schema
    });
  }, [props.schema, currentEmbedRef.current]);
  return React.createElement("div", {
    className: props.className,
    ref: function ref(element) {
      setWrapperElement(element);
    }
  });
}

export { EmbeddedExplorer as ApolloExplorer, ApolloExplorerReact };
//# sourceMappingURL=explorer.esm.js.map
