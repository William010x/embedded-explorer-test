import type { IntrospectionQuery } from 'graphql';
import { HandleRequest } from '../helpers/postMessageRelayHelpers';
export interface BaseEmbeddableExplorerOptions {
    target: string | HTMLElement;
    initialState?: {
        document?: string;
        variables?: Record<string, any>;
        headers?: Record<string, string>;
        displayOptions: {
            docsPanelState?: 'open' | 'closed';
            showHeadersAndEnvVars?: boolean;
            theme?: 'dark' | 'light';
        };
    };
    persistExplorerState?: boolean;
    endpointUrl: string;
    handleRequest?: HandleRequest;
    autoInviteOptions?: {
        accountId: string;
        inviteToken: string;
    };
    /**
     * Only for Apollo team testing
     */
    apolloStudioEnv?: 'staging' | 'prod';
}
export declare function getEmbeddedExplorerBaseUrl(apolloStudioEnv: 'staging' | 'prod' | undefined): "https://deploy-preview-6300--embeddable-explorer.netlify.app/" | "https://explorer.embed.apollographql.com";
interface EmbeddableExplorerOptionsWithSchema extends BaseEmbeddableExplorerOptions {
    schema: string | IntrospectionQuery;
    graphRef?: never;
}
interface EmbeddableExplorerOptionsWithGraphRef extends BaseEmbeddableExplorerOptions {
    graphRef: string;
    schema?: never;
}
export declare type EmbeddableExplorerOptions = EmbeddableExplorerOptionsWithSchema | EmbeddableExplorerOptionsWithGraphRef;
export declare class EmbeddedExplorer {
    options: EmbeddableExplorerOptions;
    handleRequest: HandleRequest;
    embeddedExplorerURL: string;
    embeddedExplorerIFrameElement: HTMLIFrameElement;
    uniqueEmbedInstanceId: number;
    private disposable;
    constructor(options: EmbeddableExplorerOptions);
    dispose(): void;
    injectEmbed(): HTMLIFrameElement;
    validateOptions(): void;
    getEmbeddedExplorerURL: () => string;
    updateSchemaInEmbed({ schema, }: {
        schema?: string | IntrospectionQuery | undefined;
    }): void;
}
export {};
